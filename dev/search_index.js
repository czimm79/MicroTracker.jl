var documenterSearchIndex = {"docs":
[{"location":"settingupdev/#Setting-Up-(for-beginners)","page":"Setting Up (for beginners)","title":"Setting Up (for beginners)","text":"","category":"section"},{"location":"settingupdev/","page":"Setting Up (for beginners)","title":"Setting Up (for beginners)","text":"Using a notebook environment like Pluto or Jupyter doesn't work well when developing and contributing to an open source package. This page is a quick set up guide for using Visual Studio Code (VSCode) with the Julia extension to develop MicroTracker.jl.","category":"page"},{"location":"settingupdev/","page":"Setting Up (for beginners)","title":"Setting Up (for beginners)","text":"note: Note\nThis is by no means the only way to accomplish this. This is just the method I prefer and have found the easiest while developing MicroTracker.","category":"page"},{"location":"settingupdev/#VS-Code","page":"Setting Up (for beginners)","title":"VS Code","text":"","category":"section"},{"location":"settingupdev/","page":"Setting Up (for beginners)","title":"Setting Up (for beginners)","text":"Install Visual Studio Code and the Julia extension. \nEnsure you can run a hello world julia script, detailed in the getting started page.\nGet accustomed to running code in the integrated Julia REPL in VSCode using keybinds like shift+enter and ctrl+enter. This is also detailed in the extension docs here.\nAdd Revise.jl to your base Julia environment. By default, the VSCode Julia extension detects that its available and automatically loads it when starting a Julia extension integrated REPL in VSCode.\nInstall git.","category":"page"},{"location":"settingupdev/#GitHub-Desktop","page":"Setting Up (for beginners)","title":"GitHub Desktop","text":"","category":"section"},{"location":"settingupdev/","page":"Setting Up (for beginners)","title":"Setting Up (for beginners)","text":"Download Github Desktop.\nFile -> Clone Repository -> paste in the URL for MicroTracker.jl. https://github.com/czimm79/MicroTracker.jl.\nRight click on Current Repository (MicroTracker.jl) -> Open in Visual Studio Code.","category":"page"},{"location":"settingupdev/#Setting-up-environment","page":"Setting Up (for beginners)","title":"Setting up environment","text":"","category":"section"},{"location":"settingupdev/","page":"Setting Up (for beginners)","title":"Setting Up (for beginners)","text":"The dependent packages for MicroTracker normally automatically install behind the scenes when you use ] add MicroTracker in the REPL. When developing, we need to instantiate that dependency environment.","category":"page"},{"location":"settingupdev/","page":"Setting Up (for beginners)","title":"Setting Up (for beginners)","text":"Open the command palette in VSCode (ctrl+shift+p) and select Julia: Start REPL. Activate the MicroTracker environment:","category":"page"},{"location":"settingupdev/","page":"Setting Up (for beginners)","title":"Setting Up (for beginners)","text":"(v1.8) pkg> activate .","category":"page"},{"location":"settingupdev/","page":"Setting Up (for beginners)","title":"Setting Up (for beginners)","text":"You should be able to run the test command in the pkg mode and all tests should pass. You are now ready to make changes!","category":"page"},{"location":"settingupdev/","page":"Setting Up (for beginners)","title":"Setting Up (for beginners)","text":"note: Note\nWhen opening the package, sometimes VSCode will automatically recognize that the MicroTracker environment should be activated and prompt you. If this is the case, instead of (v1.8), you'll see MicroTracker, and you can skip step 2.","category":"page"},{"location":"settingupdev/#Creating-a-pull-request","page":"Setting Up (for beginners)","title":"Creating a pull request","text":"","category":"section"},{"location":"settingupdev/","page":"Setting Up (for beginners)","title":"Setting Up (for beginners)","text":"GitHub Desktop makes proposing changes to a repository easy without learning git on the command line. The general workflow is detailed here.","category":"page"},{"location":"settingupdev/#Common-hiccups","page":"Setting Up (for beginners)","title":"Common hiccups","text":"","category":"section"},{"location":"settingupdev/","page":"Setting Up (for beginners)","title":"Setting Up (for beginners)","text":"Sometimes when changing the dependencies of MicroTracker, the CI for the docs will fail. I fixed this by activating the docs env using activate ./docs and then resolve.","category":"page"},{"location":"visualization/#Visualization","page":"Visualization","title":"Visualization","text":"","category":"section"},{"location":"visualization/","page":"Visualization","title":"Visualization","text":"Along with Plots.jl and StatsPlots.jl for normal plotting of collapsed_data in scatter plot form, MicroTracker comes with handy tools to view the full multi-dimensional nature of microbot trajectories.","category":"page"},{"location":"visualization/","page":"Visualization","title":"Visualization","text":"For full interactivity, use the included Pluto notebook (see the Pluto docs page). This allows input arguments to the trajectory_analyzer to be rapidly changed with sliders and drop-down menus.","category":"page"},{"location":"visualization/","page":"Visualization","title":"Visualization","text":"trajectory_analyzer\nanimate_trajectory_analyzer","category":"page"},{"location":"visualization/#MicroTracker.trajectory_analyzer","page":"Visualization","title":"MicroTracker.trajectory_analyzer","text":"trajectory_analyzer(linked_data, collapsed_data, particle_unique::AbstractString, [framenumber; [size_variable=\"Major_um\"], [annotationkwargs...])\n\nDisplay a comphrehensive dashboard of a single microbot, including instantaneous velocity, a chosen size_variable, and the FFT of the size_variable.\n\nArguments\n\nlinked_data : AbstractDataFrame, time-series linked data, as returned by load_linked_data or batch_particle_data_to_linked_data.\ncollapsed_data : AbstractDataFrame, collapsed data with a row per microbot, as returned by collapse_data.\nparticle_unique : AbstractString. The unique identifier of the microbot to be analyzed.\nframenumber : (Optional) Int The frame number to be displayed. If not provided, the last frame is used.\nsize_variable : (Optional) AbstractString, The column name of the size variable to be displayed. Defaults to \"Major_um\".\nannotationkwargs : (Optional) Keyword arguments passed to plotannotatedframe_single().\n\n\n\n\n\n","category":"function"},{"location":"visualization/#MicroTracker.animate_trajectory_analyzer","page":"Visualization","title":"MicroTracker.animate_trajectory_analyzer","text":"animate_trajectory_analyzer(linked_data, collapsed_data, particle_unique, savepath, [framerange]; animation_speed_multiplier=1, size_variable=\"Major_um\", annotationkwargs...)\n\nExport an animation of the trajectory analyzer and save it to savepath.\n\nArguments\n\nlinked_data : AbstractDataFrame, time-series linked data, as returned by load_linked_data or batch_particle_data_to_linked_data.\ncollapsed_data : AbstractDataFrame, collapsed data with a row per microbot, as returned by collapse_data.\nparticle_unique : AbstractString. The unique identifier of the microbot to be analyzed.\nsavepath : AbstractString. The path to save the animation to.\nframerange : (Optional) UnitRange{Int64}. The range of frames to be displayed. If not provided, the entire trajectory is animated.\nanimation_speed_multiplier : (Optional) Int. The speed of the animation. Defaults to 1.\nsize_variable : (Optional) AbstractString, The column name of the size variable to be displayed. Defaults to \"Major_um\".\nannotationkwargs : (Optional) Keyword arguments passed to plotannotatedframe_single().\n\nExample\n\njulia> trajectory_analyzer(linked_data, collapsed_data, \"5_13p5_61p35-2\", \"my_animation.mp4\")\n[ Info: Creating animation: Frame = 5\n...\n[ Info: Saved animation to ~/myanimation.gif\n\n\n\n\n\n","category":"function"},{"location":"collapsing/#Collapsing","page":"Collapsing","title":"Collapsing","text":"","category":"section"},{"location":"collapsing/","page":"Collapsing","title":"Collapsing","text":"On this page, you'll process the time-series linked_data into collapsed_data which summarizes each microbot into a single row.","category":"page"},{"location":"collapsing/#Collapse-data","page":"Collapsing","title":"Collapse data","text":"","category":"section"},{"location":"collapsing/","page":"Collapsing","title":"Collapsing","text":"The convenient function collapse_data calculates the most common metrics used from the metrics calculated from ImageJ Segmentation. To see the source code, click the blue \"source\" button.","category":"page"},{"location":"collapsing/","page":"Collapsing","title":"Collapsing","text":"collapse_data","category":"page"},{"location":"collapsing/#MicroTracker.collapse_data","page":"Collapsing","title":"MicroTracker.collapse_data","text":"collapse_data(linked_data::AbstractDataFrame, translation_dict::Dict)\n\nCollapse each time-series microbot trajectory into a single row of summary data for each microbot. \n\nUses the translation_dict from Translation Dictionary to include the experimental data.\n\nOutput column definitions\n\nV : The mean of the instantaneous speed, dp_um. Always positive, as it is a magnitude. Units of µm/s.\nVx : The mean of the numerical derivative of the x-position. Can be positive or negative. Units of µm/s.\nVy : The mean of the numerical derivative of the y-position. Can be positive or negative. Units of µm/s.\nArea_um_mean : The mean of the area of the microbot. Units of µm^2.\nΩ_est : The estimated rotation rate extracted from the FFT of the Major_um column in the linked data. Performed using the estimate_omega function. Units of Hz.\nR : The bounding-circle radius/radius of gyration. Calculated as the 95th percentile of the major axis Major_um divided by 2. Units of µm.\nCircularity : A quantifier based on the aspect ratio of the fit ellipse. Calculated from ImageJ. See their docs. Unitless.\ntotal_displacement_um : The total displacement of the microbot over its entire trajectory. This is already constant in linked_data, so just take one of the values. Units of µm.\n\nExample\n\njulia> collapse_data(linked_data, translation_dict)\n37×13 DataFrame\n Row │ particle_unique  filename      V          Vx           Vy           Area_um_mean  Ω_est      R         Circularity  total_displacement_um  B_mT     FPS      f_Hz  \n     │ String15         String15      Float64    Float64      Float64      Float64       Float64    Float64   Float64      Float64                Float64  Float64  Int64\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 5_13p5_61p35-0   5_13p5_61p35  88.7683    73.1812      -0.533202       524.844    0.0866525  28.8823      0.466515            425.447         13.5    61.35      5\n   2 │ 5_13p5_61p35-1   5_13p5_61p35  84.2168    75.1932      -1.43098        723.553    0.184789   37.7608      0.447464            204.647         13.5    61.35      5\n   3 │ 5_13p5_61p35-2   5_13p5_61p35  34.589     25.285        3.95886         66.7345   4.94208    12.1932      0.706898            151.268         13.5    61.35      5\n   4 │ 5_13p5_61p35-3   5_13p5_61p35  61.7119    51.8247      -3.01578         80.8338   5.06137    14.7728      0.647094            170.821         13.5    61.35      5\n   5 │ 5_13p5_61p35-4   5_13p5_61p35  20.6538     7.68584      0.0244971       23.9995   2.51434     2.91041     0.984024             15.7076        13.5    61.35      5\n   6 │ 5_13p5_61p35-5   5_13p5_61p35  21.9972     7.1295      -0.320993        24.6687   2.48485     2.94544     0.98336              41.961         13.5    61.35      5\n   7 │ 5_13p5_61p35-6   5_13p5_61p35  22.2261     6.78449     -0.353836        24.5469   2.47104     2.94414     0.982008             40.0362        13.5    61.35      5\n   8 │ 5_13p5_61p35-7   5_13p5_61p35  22.2123     6.55907      0.46061         24.4111   2.46496     2.94133     0.983553             36.1651        13.5    61.35      5\n  ⋮  │        ⋮              ⋮            ⋮           ⋮            ⋮            ⋮            ⋮         ⋮           ⋮                 ⋮               ⋮        ⋮       ⋮\n  31 │ 5_8p4_28p68-9    5_8p4_28p68   40.4129    15.381       35.4248          85.391    5.28316    14.6976      0.628366             54.0731         8.4    28.68      5\n  32 │ 5_8p4_28p68-10   5_8p4_28p68   40.729     20.3822      33.0557         566.571    1.88684    26.3958      0.491463             54.3218         8.4    28.68      5\n  33 │ 5_8p4_28p68-11   5_8p4_28p68   41.6894    18.5982      35.8152         707.16     1.50947    28.0554      0.509829             56.0121         8.4    28.68      5\n  34 │ 5_8p4_28p68-12   5_8p4_28p68    0.700078  -0.0662316   -0.00804089      21.3812   2.64158     2.94514     0.96161               0.0593394      8.4    28.68      5\n  35 │ 5_8p4_28p68-13   5_8p4_28p68   39.0276    18.1646      31.7101         660.916    1.50947    27.9988      0.504366             51.1676         8.4    28.68      5\n  36 │ 5_8p4_28p68-14   5_8p4_28p68   12.5579    -0.761769     0.545299        15.3284   0.377368    2.89432     0.917512              1.12274        8.4    28.68      5\n  37 │ 5_8p4_28p68-15   5_8p4_28p68   47.225     17.9276      40.9265         152.034    5.28316    19.533       0.609                62.9841         8.4    28.68      5\n                                                                                                                                                           22 rows omitted\n\n\n\n\n\n","category":"function"},{"location":"collapsing/#Filtering-based-on-collapsed-data","page":"Collapsing","title":"Filtering based on collapsed data","text":"","category":"section"},{"location":"collapsing/","page":"Collapsing","title":"Collapsing","text":"After collapsing the data, its common to filter out microbots that may be too small or large, going too slow, or stuck to the substrate. This can be performed using the filter_trajectories function.","category":"page"},{"location":"collapsing/","page":"Collapsing","title":"Collapsing","text":"filter_trajectories","category":"page"},{"location":"collapsing/#MicroTracker.filter_trajectories","page":"Collapsing","title":"MicroTracker.filter_trajectories","text":"filter_trajectories(collapsed_data::AbstractDataFrame, filter_settings::NamedTuple)\n\nFilter out microbots that may be too small or large, going too slow, or stuck to the substrate.\n\nThe filter_settings is a NamedTuple with the following fields:\n\nMIN_VELOCITY : minimum velocity in um/s\nMIN_BOUNDING_RADIUS : minimum bounding radius in um\nMAX_BOUNDING_RADIUS : maximum bounding radius in um\nMIN_DISPLACEMENT : minimum total displacement in um\n\nExample\n\nfilter_settings = (\n    MIN_VELOCITY = 10.0,  # um / s  \n    MIN_BOUNDING_RADIUS = 3.38,  # um\n    MAX_BOUNDING_RADIUS = 75,  # µm\n    MIN_DISPLACEMENT = 0,  # µm\n)\n\nfiltered_collapsed_data = filter_trajectories(collapsed_data, filter_settings)\n\n\n\n\n\n","category":"function"},{"location":"segmenting/#Segmentation","page":"Segmentation","title":"Segmentation","text":"","category":"section"},{"location":"segmenting/","page":"Segmentation","title":"Segmentation","text":"On this page, you will learn what image segmentation is and how to perform it on your video using ImageJ. This step is not needed if you have already segmented your video using another tool.","category":"page"},{"location":"segmenting/#Intro","page":"Segmentation","title":"Intro","text":"","category":"section"},{"location":"segmenting/","page":"Segmentation","title":"Segmentation","text":"Image segmentation is the process of separating the image background (stuff we don't care about) from the foreground (stuff we care about). Here, our foreground is the microbots.","category":"page"},{"location":"segmenting/","page":"Segmentation","title":"Segmentation","text":"Segmentation can be performed with a variety of methods, from simple (thresholding), to advanced (training neural nets). MicroTracker does not segment videos, due to the variety of softwares and methods available that are specific to the microscopy techniques used. In this guide, we will use ImageJ/Fiji due to its simplicity, flexibility, and established use. However, you may use other software such as illastik if more advanced segmentation is needed, but a walkthrough of that is out of scope of this guide.","category":"page"},{"location":"segmenting/","page":"Segmentation","title":"Segmentation","text":"info: Info\nSegmentation will process raw microscopy video into a .csv file that contains a row for each observation of a particle on each individual frame. This data does not contain any information about the video, like that the particles are moving/rotating between frames. That's where MicroTracker comes in.","category":"page"},{"location":"segmenting/#Setup","page":"Segmentation","title":"Setup","text":"","category":"section"},{"location":"segmenting/#Download-Fiji","page":"Segmentation","title":"Download Fiji","text":"","category":"section"},{"location":"segmenting/","page":"Segmentation","title":"Segmentation","text":"If you've conducted microscopy research, you've likely heard of ImageJ. Fiji is a distribution of ImageJ with useful plugins already installed. Download it at their website here.","category":"page"},{"location":"segmenting/#Use-MicroTracker-to-create-an-ImageJ-macro-for-your-videos","page":"Segmentation","title":"Use MicroTracker to create an ImageJ macro for your videos","text":"","category":"section"},{"location":"segmenting/","page":"Segmentation","title":"Segmentation","text":"First, make sure you've opened a terminal in the same folder from the step: Creating an environment for your project. To test this, use the pwd() command from Julia base and verify you're in the correct directory. Also, activate the julia environment with the line ] activate .","category":"page"},{"location":"segmenting/","page":"Segmentation","title":"Segmentation","text":"julia> pwd()\n\"R:\\\\Wormhole\\\\OneDrive\\\\Research\\\\Papers\\\\JOSS_microtracker\\\\tutorial\"\n\n(v1.9)> activate .\nActivating project at `R:\\Wormhole\\OneDrive\\Research\\Papers\\JOSS_microtracker\\tutorial`\n\njulia> using MicroTracker","category":"page"},{"location":"segmenting/","page":"Segmentation","title":"Segmentation","text":"We'll be using the create_imagej_macro_here function to create an imagej macro to start with.","category":"page"},{"location":"segmenting/","page":"Segmentation","title":"Segmentation","text":"julia> create_imagej_macro_here(MPP=0.605, minimum_segmentation_diameter=4.5)\n[ Info: ImageJ macro created at ~/tutorial/imagej_macro.ijm. See MicroTracker segmentation docs for instructions on how to use it","category":"page"},{"location":"segmenting/#Using-the-macro","page":"Segmentation","title":"Using the macro","text":"","category":"section"},{"location":"segmenting/","page":"Segmentation","title":"Segmentation","text":"Now, open Fiji. Navigate to Plugins -> Macros -> Edit and browse to the newly created imagej_macro.ijm.","category":"page"},{"location":"segmenting/","page":"Segmentation","title":"Segmentation","text":"You should now see an open window with the generate .ijm script for your project. (Image: imagejmacroscreenshot)","category":"page"},{"location":"segmenting/","page":"Segmentation","title":"Segmentation","text":"You'll notice a few things:","category":"page"},{"location":"segmenting/","page":"Segmentation","title":"Segmentation","text":"The microtracker_directory variable was set to the working directory where you ran the create_imagej_macro_here function, i.e. your project folder.\nThis macro takes your videos in /original_video as input, and outputs the segmented .csv files in /particle_data.\nThe minimum segmentation area is calculated according to what you supplied as the minimum_segmentation_diameter.","category":"page"},{"location":"segmenting/","page":"Segmentation","title":"Segmentation","text":"Click \"Run\" to run the macro. This opens up each video, applies a binary filter, and runs the ImageJ \"Analyze Particles\" function. See their docs for more information. After doing this, it saves a .csv file of the results with an identical filename to your video.","category":"page"},{"location":"segmenting/","page":"Segmentation","title":"Segmentation","text":"tip: Tip\nThis macro is just a starter example! Though it works for the vast majority of microbot microscopy video with good contrast, additional filters like gaussian blur, denoise, or background removal may be needed. To see what commands need to be added in the macro, use the Fiji \"Record\" function at Plugins -> Macros -> Record while you apply the filter in the GUI.","category":"page"},{"location":"segmenting/","page":"Segmentation","title":"Segmentation","text":"After this process, you should have a .csv file in particle_data for each video in original_video. You can open one up in excel and verify it contains the X, Y, and Label columns.","category":"page"},{"location":"segmenting/#Caveats","page":"Segmentation","title":"Caveats","text":"","category":"section"},{"location":"segmenting/","page":"Segmentation","title":"Segmentation","text":"On Mac, when running the ImageJ macro more than once, it will error with \"Permission denied\", as it will not overwrite previously saved .csv files with the same name. To fix this, just remove the generated .csv files in particle_data before re-running the macro.","category":"page"},{"location":"settingupuser/#Setting-Up","page":"Setting Up","title":"Setting Up","text":"","category":"section"},{"location":"settingupuser/","page":"Setting Up","title":"Setting Up","text":"On this page, you will","category":"page"},{"location":"settingupuser/","page":"Setting Up","title":"Setting Up","text":"Download and install Julia.\nCreate a project folder with a matching Julia environment.\nAdd MicroTracker and other necessary packages to your environment.\nCreate an organized folder structure for your project using MicroTracker.","category":"page"},{"location":"settingupuser/#Download-and-install-Julia","page":"Setting Up","title":"Download and install Julia","text":"","category":"section"},{"location":"settingupuser/","page":"Setting Up","title":"Setting Up","text":"Download and install Julia from their website https://julialang.org/downloads. For full instructions for every operating system, see https://julialang.org/downloads/platform/. Be sure to add Julia to PATH, as this allows you to call Julia anywhere from the command line by typing julia. On Windows, this is by just checking the box, but on Mac, you'll have to run the commands in your terminal from the second Julia website link above.","category":"page"},{"location":"settingupuser/","page":"Setting Up","title":"Setting Up","text":"tip: Tip\nOn Windows, I recommend installing Julia from the Windows Store. This automatically adds Julia to your PATH and also installs the juliaup command line tool to seamlessly update Julia when new versions are released. Both options work though!","category":"page"},{"location":"settingupuser/#Test-if-it-works","page":"Setting Up","title":"Test if it works","text":"","category":"section"},{"location":"settingupuser/","page":"Setting Up","title":"Setting Up","text":"Open a terminal window and type julia. You should be able to run simple commands, like 1+1. For more basic information on Julia, see their great documentation.","category":"page"},{"location":"settingupuser/","page":"Setting Up","title":"Setting Up","text":"(Image: 1 plus 1 in julia)","category":"page"},{"location":"settingupuser/#Open-a-Julia-REPL-in-a-directory","page":"Setting Up","title":"Open a Julia REPL in a directory","text":"","category":"section"},{"location":"settingupuser/","page":"Setting Up","title":"Setting Up","text":"Its easiest to use MicroTracker if you know how to open a terminal at a specific directory. On Windows, I use the new Windows Terminal which allows you to right click in a folder and click \"Open in Terminal\". You can also type in the explorer address bar cmd to get the same effect. On Mac, right click on the folder and click New Terminal at Folder. Once the terminal is open, you should be able to type julia to enter the Julia REPL.","category":"page"},{"location":"settingupuser/","page":"Setting Up","title":"Setting Up","text":"If for some reason you can't/don't want to add Julia to your PATH, you can use the Base Julia function cd to navigate to your folder. Verify your directory with the pwd function.","category":"page"},{"location":"settingupuser/#Creating-an-environment-for-your-project","page":"Setting Up","title":"Creating an environment for your project","text":"","category":"section"},{"location":"settingupuser/","page":"Setting Up","title":"Setting Up","text":"Now we need a place for our MicroTracker project to live. This will contain all the microscopy video, data we will generate, and tools we will use to analyze our data.","category":"page"},{"location":"settingupuser/","page":"Setting Up","title":"Setting Up","text":"To do this, just create a new empty folder. Name it descriptively, like 2023-06-21 microwheel field sweep. For this page, I'll just create a folder named tutorial. Open a Julia REPL in this directory as described in the above section.","category":"page"},{"location":"settingupuser/","page":"Setting Up","title":"Setting Up","text":"Now, type ] at the empty julia> prompt, before typing anything else. This enters you into package mode. You'll notice that now instead of julia>, you see the name of the current environment in blue. Now, use the following commands to create a new environment in your current folder:","category":"page"},{"location":"settingupuser/","page":"Setting Up","title":"Setting Up","text":"(@v1.9) pkg> activate .\nActivating new project at `R:\\Wormhole\\OneDrive\\Research\\Papers\\JOSS_microtracker\\tutorial`\n\n(tutorial) pkg> add MicroTracker Pluto PlutoUI\n...output snipped","category":"page"},{"location":"settingupuser/","page":"Setting Up","title":"Setting Up","text":"and wait as the packages and all of their dependencies download! This adds MicroTracker, Pluto, and PlutoUI packages to your environment. If you do not plan on using the included Pluto notebook, then only MicroTracker is needed.","category":"page"},{"location":"settingupuser/","page":"Setting Up","title":"Setting Up","text":"tip: Tip\nWhen adding MicroTracker, Julia will also automatically precompile the environment to make future use of the package speedy. This may take awhile, as this environment contains everything needed to process and visualize your data. It also comes included with sample microscopy video, so it may take a little longer to download than other packages.","category":"page"},{"location":"settingupuser/#Create-a-MicroTracker-project","page":"Setting Up","title":"Create a MicroTracker project","text":"","category":"section"},{"location":"settingupuser/","page":"Setting Up","title":"Setting Up","text":"Now that we have a new Julia environment in this folder with MicroTracker installed, lets start using MicroTracker! To import a package, Julia uses the keyword using. Make sure you're out of package mode by pressing backspace. The prompt should read julia> again. After that, we'll use the create_project_here function.","category":"page"},{"location":"settingupuser/","page":"Setting Up","title":"Setting Up","text":"julia> using MicroTracker\n\njulia> create_project_here()\n[ Info: New MicroTracker project created in R:\\Wormhole\\OneDrive\\Research\\Papers\\JOSS_microtracker\\tutorial\n","category":"page"},{"location":"settingupuser/","page":"Setting Up","title":"Setting Up","text":"You should now see the layout of a MicroTracker project in your folder. Once you get the hang of MicroTracker, the argument include_examples=false can be used to exclude the sample video and data for future projects.","category":"page"},{"location":"settingupuser/","page":"Setting Up","title":"Setting Up","text":"tutorial/\n├── original_video/\n│   ├── 5_8p4_28p68/\n│   └── 5_13p5_61p35/\n├── particle_data/\n│   ├── 5_8p4_28p68\n│   └── 5_13p5_61p35\n├── linked_data/\n│   └── (B_mT=(2, Float64), FPS=(3, Float64), f_Hz=(1, Int64)) - (MPP = 0.605, SEARCH_RANGE_MICRONS = 1000, MEMORY = 0,   \n│        STUBS_SECONDS = 0.5).csv\n└── microtracker_notebook.jl","category":"page"},{"location":"settingupuser/","page":"Setting Up","title":"Setting Up","text":"original_video The raw microscopy video goes here, in the Image Sequence format (folders of .tif images). Many microscopes output automatically in this format, or Fiji can be used to save almost any format into the Image Sequence format.\nparticle_data This is where a .csv file for each video, with the same filename, will be located. These csv files are the result of segmentation, which is explained thoroughly in the next page of the manual!\nlinked_data This is the primary output of MicroTracker. This is where .csv files are output that contains data for every microbot across all videos. This ensures that all analysis is carried out with the same parameters.\nmicrotracker_notebook.jl A Pluto notebook containing a sample workflow and plots. An easy alternative to typing in the command prompt.","category":"page"},{"location":"settingupuser/#Subsequent-sessions","page":"Setting Up","title":"Subsequent sessions","text":"","category":"section"},{"location":"settingupuser/","page":"Setting Up","title":"Setting Up","text":"After closing out Julia or restarting your computer, you'll have to re-open a Julia REPL in the same folder as explained in the Open a Julia REPL in a directory section. Don't forget to re-activate the environment you created and installed MicroTracker into. Remember, use ] to get into Pkg mode to run the activate . command.","category":"page"},{"location":"settingupuser/","page":"Setting Up","title":"Setting Up","text":"julia> pwd()\n\"R:\\\\Wormhole\\\\OneDrive\\\\Research\\\\Papers\\\\JOSS_microtracker\\\\tutorial\"\n\n(v1.9)> activate .\nActivating project at `R:\\Wormhole\\OneDrive\\Research\\Papers\\JOSS_microtracker\\tutorial`\n\njulia> using MicroTracker","category":"page"},{"location":"settingupuser/#Alternatives","page":"Setting Up","title":"Alternatives","text":"","category":"section"},{"location":"settingupuser/","page":"Setting Up","title":"Setting Up","text":"If you open the Pluto notebook as described on the Pluto page, you do not need to activate the environment.\nVSCode.","category":"page"},{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [MicroTracker]","category":"page"},{"location":"api/#MicroTracker.add_info_columns_from_filename-Tuple{AbstractDataFrame, Dict}","page":"API","title":"MicroTracker.add_info_columns_from_filename","text":"add_info_columns_from_filename(particle_data::AbstractDataFrame, translation_dict::AbstractDict)\n\nExtract experimental metadata from the filename column and create a new column for each in particle_data. Returns a new DataFrame.\n\nAssumes the filename is separated by underscores and periods are denoted by p. The translation_dict details the filename format. For full explanation, see the MicroTracker docs: Translation Dictionary.\n\n\n\n\n\n","category":"method"},{"location":"api/#MicroTracker.add_resolution_column!-Tuple{AbstractDataFrame}","page":"API","title":"MicroTracker.add_resolution_column!","text":"add_resolution_column!(particle_data::AbstractDataFrame)\n\nLook at a frame of the video in original_video which corresponds to the data and add a column for the resolution of type Tuple{Int, Int}. Modifies particle_data in place, signfified by the ! in the function name.\n\nUses getvideoresolution.\n\n\n\n\n\n","category":"method"},{"location":"api/#MicroTracker.add_useful_columns-Tuple{AbstractDataFrame, NamedTuple}","page":"API","title":"MicroTracker.add_useful_columns","text":"add_useful_columns(linked_data::AbstractDataFrame, linking_settings::NamedTuple)\n\nAfter linking, add some useful columns to the dataframe, like include dx, dy, dp (speed), and size measurements in microns. \n\nUses the numerical_derivative and total_displacement functions.\n\nDefinitions\n\nparticle_unique : a string which uniquely identifies a particle. This is a combination of the filename and the particle number.\ndx : numerical derivative of x, i.e. instantaneous velocity in the x direction. Units of pixels/frame.\ndy : numerical derivative of y, i.e. instantaneous velocity in the y direction. Units of pixels/frame.\ndp : instantaneous speed. √(dx^2 + dy^2). Units of pixels/frame.\ndx_um : dx converted to µm/s.\ndy_um : dy converted to µm/s.\ndp_um : dp converted to µm/s.\ntotal_displacement_um : total displacement of the microbot. Constant on every row, since this is a total. Units of µm.\nArea_um : area of the microbot. Units of µm^2.\ntime : time, converted from the frame column. Units of seconds.\nMajor_um : major axis of the fit ellipse of the microbot. Units of µm.\nMinor_um : minor axis of the fit ellipse of the microbot. Units of µm.\n\n\n\n\n\n","category":"method"},{"location":"api/#MicroTracker.animate_trajectory_analyzer-Tuple{AbstractDataFrame, AbstractDataFrame, AbstractString, AbstractString}","page":"API","title":"MicroTracker.animate_trajectory_analyzer","text":"animate_trajectory_analyzer(linked_data, collapsed_data, particle_unique, savepath, [framerange]; animation_speed_multiplier=1, size_variable=\"Major_um\", annotationkwargs...)\n\nExport an animation of the trajectory analyzer and save it to savepath.\n\nArguments\n\nlinked_data : AbstractDataFrame, time-series linked data, as returned by load_linked_data or batch_particle_data_to_linked_data.\ncollapsed_data : AbstractDataFrame, collapsed data with a row per microbot, as returned by collapse_data.\nparticle_unique : AbstractString. The unique identifier of the microbot to be analyzed.\nsavepath : AbstractString. The path to save the animation to.\nframerange : (Optional) UnitRange{Int64}. The range of frames to be displayed. If not provided, the entire trajectory is animated.\nanimation_speed_multiplier : (Optional) Int. The speed of the animation. Defaults to 1.\nsize_variable : (Optional) AbstractString, The column name of the size variable to be displayed. Defaults to \"Major_um\".\nannotationkwargs : (Optional) Keyword arguments passed to plotannotatedframe_single().\n\nExample\n\njulia> trajectory_analyzer(linked_data, collapsed_data, \"5_13p5_61p35-2\", \"my_animation.mp4\")\n[ Info: Creating animation: Frame = 5\n...\n[ Info: Saved animation to ~/myanimation.gif\n\n\n\n\n\n","category":"method"},{"location":"api/#MicroTracker.batch_particle_data_to_linked_data-Tuple{Dict, NamedTuple}","page":"API","title":"MicroTracker.batch_particle_data_to_linked_data","text":"batch_particle_data_to_linked_data(translation_dict::Dict, linking_settings::NamedTuple; save_to_csv=true)\n\nProcess all .csv files in particle_data into linked trajectory data and concatenate the results.\n\nReturns a DataFrame containing all linked data for the entire experimental array. This is also saved to linked_data  using save_linked_data_with_metadata for record keeping and further analysis.\n\nThe translation_dict is a dictionary detailing the information contained in the filename. linking_settings contains the input parameters for the linking algorithm and microscope information. Only one of these arguments may contain the FPS.\n\nFor full explanation, see the MicroTracker Linking docs.\n\n\n\n\n\n","category":"method"},{"location":"api/#MicroTracker.clip_trajectory_edges-Tuple{AbstractDataFrame, NamedTuple}","page":"API","title":"MicroTracker.clip_trajectory_edges","text":"clip_trajectory_edges(linked_data::AbstractDataFrame, linking_settings::NamedTuple)\n\nIterate through each trajectory and remove the tracking data where the particle is out of frame.\n\nThe particle is out of frame when the center is within the radius of the particle from the edge of the video.\n\nUses find_trajectory_bounds to find the bounds of the trajectory with inbounds.\n\n\n\n\n\n","category":"method"},{"location":"api/#MicroTracker.collapse_data-Tuple{AbstractDataFrame, Dict}","page":"API","title":"MicroTracker.collapse_data","text":"collapse_data(linked_data::AbstractDataFrame, translation_dict::Dict)\n\nCollapse each time-series microbot trajectory into a single row of summary data for each microbot. \n\nUses the translation_dict from Translation Dictionary to include the experimental data.\n\nOutput column definitions\n\nV : The mean of the instantaneous speed, dp_um. Always positive, as it is a magnitude. Units of µm/s.\nVx : The mean of the numerical derivative of the x-position. Can be positive or negative. Units of µm/s.\nVy : The mean of the numerical derivative of the y-position. Can be positive or negative. Units of µm/s.\nArea_um_mean : The mean of the area of the microbot. Units of µm^2.\nΩ_est : The estimated rotation rate extracted from the FFT of the Major_um column in the linked data. Performed using the estimate_omega function. Units of Hz.\nR : The bounding-circle radius/radius of gyration. Calculated as the 95th percentile of the major axis Major_um divided by 2. Units of µm.\nCircularity : A quantifier based on the aspect ratio of the fit ellipse. Calculated from ImageJ. See their docs. Unitless.\ntotal_displacement_um : The total displacement of the microbot over its entire trajectory. This is already constant in linked_data, so just take one of the values. Units of µm.\n\nExample\n\njulia> collapse_data(linked_data, translation_dict)\n37×13 DataFrame\n Row │ particle_unique  filename      V          Vx           Vy           Area_um_mean  Ω_est      R         Circularity  total_displacement_um  B_mT     FPS      f_Hz  \n     │ String15         String15      Float64    Float64      Float64      Float64       Float64    Float64   Float64      Float64                Float64  Float64  Int64\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 5_13p5_61p35-0   5_13p5_61p35  88.7683    73.1812      -0.533202       524.844    0.0866525  28.8823      0.466515            425.447         13.5    61.35      5\n   2 │ 5_13p5_61p35-1   5_13p5_61p35  84.2168    75.1932      -1.43098        723.553    0.184789   37.7608      0.447464            204.647         13.5    61.35      5\n   3 │ 5_13p5_61p35-2   5_13p5_61p35  34.589     25.285        3.95886         66.7345   4.94208    12.1932      0.706898            151.268         13.5    61.35      5\n   4 │ 5_13p5_61p35-3   5_13p5_61p35  61.7119    51.8247      -3.01578         80.8338   5.06137    14.7728      0.647094            170.821         13.5    61.35      5\n   5 │ 5_13p5_61p35-4   5_13p5_61p35  20.6538     7.68584      0.0244971       23.9995   2.51434     2.91041     0.984024             15.7076        13.5    61.35      5\n   6 │ 5_13p5_61p35-5   5_13p5_61p35  21.9972     7.1295      -0.320993        24.6687   2.48485     2.94544     0.98336              41.961         13.5    61.35      5\n   7 │ 5_13p5_61p35-6   5_13p5_61p35  22.2261     6.78449     -0.353836        24.5469   2.47104     2.94414     0.982008             40.0362        13.5    61.35      5\n   8 │ 5_13p5_61p35-7   5_13p5_61p35  22.2123     6.55907      0.46061         24.4111   2.46496     2.94133     0.983553             36.1651        13.5    61.35      5\n  ⋮  │        ⋮              ⋮            ⋮           ⋮            ⋮            ⋮            ⋮         ⋮           ⋮                 ⋮               ⋮        ⋮       ⋮\n  31 │ 5_8p4_28p68-9    5_8p4_28p68   40.4129    15.381       35.4248          85.391    5.28316    14.6976      0.628366             54.0731         8.4    28.68      5\n  32 │ 5_8p4_28p68-10   5_8p4_28p68   40.729     20.3822      33.0557         566.571    1.88684    26.3958      0.491463             54.3218         8.4    28.68      5\n  33 │ 5_8p4_28p68-11   5_8p4_28p68   41.6894    18.5982      35.8152         707.16     1.50947    28.0554      0.509829             56.0121         8.4    28.68      5\n  34 │ 5_8p4_28p68-12   5_8p4_28p68    0.700078  -0.0662316   -0.00804089      21.3812   2.64158     2.94514     0.96161               0.0593394      8.4    28.68      5\n  35 │ 5_8p4_28p68-13   5_8p4_28p68   39.0276    18.1646      31.7101         660.916    1.50947    27.9988      0.504366             51.1676         8.4    28.68      5\n  36 │ 5_8p4_28p68-14   5_8p4_28p68   12.5579    -0.761769     0.545299        15.3284   0.377368    2.89432     0.917512              1.12274        8.4    28.68      5\n  37 │ 5_8p4_28p68-15   5_8p4_28p68   47.225     17.9276      40.9265         152.034    5.28316    19.533       0.609                62.9841         8.4    28.68      5\n                                                                                                                                                           22 rows omitted\n\n\n\n\n\n","category":"method"},{"location":"api/#MicroTracker.collapse_experimental-Tuple{GroupedDataFrame, Dict}","page":"API","title":"MicroTracker.collapse_experimental","text":"collapse_experimental(dfg::GroupedDataFrame, translation_dict::Dict)\n\nTake a single value from each experimental column per particle and assemble it into a dataframe.\n\nTakes a grouped dataframe of the linkeddata. Internal function used in [`collapsedata`](@ref).\n\nExample\n\njulia> collapse_experimental(groupby(linked_data, :particle_unique), translation_dict)\n37×4 DataFrame\n Row │ particle_unique  B_mT     FPS      f_Hz  \n     │ String15         Float64  Float64  Int64\n─────┼──────────────────────────────────────────\n   1 │ 5_13p5_61p35-0      13.5    61.35      5\n   2 │ 5_13p5_61p35-1      13.5    61.35      5\n   3 │ 5_13p5_61p35-2      13.5    61.35      5\n   4 │ 5_13p5_61p35-3      13.5    61.35      5\n   5 │ 5_13p5_61p35-4      13.5    61.35      5\n   6 │ 5_13p5_61p35-5      13.5    61.35      5\n   7 │ 5_13p5_61p35-6      13.5    61.35      5\n   8 │ 5_13p5_61p35-7      13.5    61.35      5\n  ⋮  │        ⋮            ⋮        ⋮       ⋮\n  31 │ 5_8p4_28p68-9        8.4    28.68      5\n  32 │ 5_8p4_28p68-10       8.4    28.68      5\n  33 │ 5_8p4_28p68-11       8.4    28.68      5\n  34 │ 5_8p4_28p68-12       8.4    28.68      5\n  35 │ 5_8p4_28p68-13       8.4    28.68      5\n  36 │ 5_8p4_28p68-14       8.4    28.68      5\n  37 │ 5_8p4_28p68-15       8.4    28.68      5\n                                 22 rows omitted\n\n\n\n\n\n","category":"method"},{"location":"api/#MicroTracker.create_imagej_macro_here-Tuple{}","page":"API","title":"MicroTracker.create_imagej_macro_here","text":"create_imagej_macro_here(;MPP::Float64, minimum_segmentation_diameter::Float64)\n\nCreate a macro script for batch segmenting videos in original_video with Fiji.\n\nRequired keyword arguments:\n\nMPP : microns per pixel, Float64 (unique to your microscope setup!)\nminimum_segmentation_diameter : only particles above this diameter*1.5 in microns will be segmented, Float64. See the following reference for why the 1.5:\n\nJ. Baumgartl, J. L. Arauz-Lara, and C. Bechinger, “Like-charge attraction in confinement: myth or truth?,”   Soft Matter, vol. 2, no. 8, p. 631, 2006, doi: 10.1039/b603052a.\n\nExample\n\njulia> create_imagej_macro_here(MPP=0.605, minimum_segmentation_diameter=4.5)\n[ Info: ImageJ macro created at ~/tutorial/imagej_macro.ijm. See MicroTracker segmentation docs for instructions on how to use it. \n\n\n\n\n\n","category":"method"},{"location":"api/#MicroTracker.create_project_here-Tuple{}","page":"API","title":"MicroTracker.create_project_here","text":"create_project_here()\ncreate_project_here(include_examples=false)\n\nCreate the folder structure for a MicroTracker project in the current working directory.\n\nIf include_examples is false, then example particle data and videos will not be included.\n\nExample\n\njulia> pwd()\n\"~/tutorial\"\n\njulia> create_project_here()\n[ Info: New MicroTracker project created in ~/tutorial\n\n\n\n\n\n","category":"method"},{"location":"api/#MicroTracker.detrend-Tuple{AbstractVector}","page":"API","title":"MicroTracker.detrend","text":"detrend(y::AbstractVector)\n\nRemove a linear trend in y.\n\n\n\n\n\n","category":"method"},{"location":"api/#MicroTracker.ellipse-NTuple{4, Any}","page":"API","title":"MicroTracker.ellipse","text":"ellipse(major, minor, pos, angle)\n\nGet points x, y for the ellipse with major and minor axes, pos vector, and angle in radians.\n\n\n\n\n\n","category":"method"},{"location":"api/#MicroTracker.estimate_omega-Tuple{AbstractVector, AbstractVector}","page":"API","title":"MicroTracker.estimate_omega","text":"estimate_omega(x::AbstractVector, y::AbstractVector)\n\nGet the highest frequency peak of x, y data and return the corresponding xf divided by 2.\n\nThis works for rolling microbots when the y data exhibits two peaks every rotation. Depending on the data, this could be the Angle, Major_m, or V columns.\n\n\n\n\n\n","category":"method"},{"location":"api/#MicroTracker.extract_frame_from_label-Tuple{AbstractString}","page":"API","title":"MicroTracker.extract_frame_from_label","text":"extract_frame_from_label(label::AbstractString)\n\nWhen using ImageJ data, the frame column does not exist, so we need to pull it out of the label column.\n\nThis function assumes the frame number is at the end of the label.\n\nExample\n\njulia> MicroTracker.extract_frame_from_label(\"5_8p4_28p68:slice:51\")\n51\n\n\n\n\n\n","category":"method"},{"location":"api/#MicroTracker.fftclean-Tuple{AbstractVector, AbstractVector}","page":"API","title":"MicroTracker.fftclean","text":"fftclean(x::AbstractVector, y::AbstractVector)\n\nTransform time data x, y into the frequency domain. Returns xf, yf.\n\n\n\n\n\n","category":"method"},{"location":"api/#MicroTracker.filter_trajectories-Tuple{AbstractDataFrame, NamedTuple}","page":"API","title":"MicroTracker.filter_trajectories","text":"filter_trajectories(collapsed_data::AbstractDataFrame, filter_settings::NamedTuple)\n\nFilter out microbots that may be too small or large, going too slow, or stuck to the substrate.\n\nThe filter_settings is a NamedTuple with the following fields:\n\nMIN_VELOCITY : minimum velocity in um/s\nMIN_BOUNDING_RADIUS : minimum bounding radius in um\nMAX_BOUNDING_RADIUS : maximum bounding radius in um\nMIN_DISPLACEMENT : minimum total displacement in um\n\nExample\n\nfilter_settings = (\n    MIN_VELOCITY = 10.0,  # um / s  \n    MIN_BOUNDING_RADIUS = 3.38,  # um\n    MAX_BOUNDING_RADIUS = 75,  # µm\n    MIN_DISPLACEMENT = 0,  # µm\n)\n\nfiltered_collapsed_data = filter_trajectories(collapsed_data, filter_settings)\n\n\n\n\n\n","category":"method"},{"location":"api/#MicroTracker.find_relevant_FPS-Tuple{AbstractDataFrame, NamedTuple}","page":"API","title":"MicroTracker.find_relevant_FPS","text":"find_relevant_FPS(particle_data::AbstractDataFrame, linking_settings::NamedTuple)\n\nUsed to allow for the FPS to be specified either in the filename or in the linking_settings. \n\nIf FPS is in the particledata, it will be used. If FPS is in the linkingsettings, it will be used. If FPS is in both, an error will be thrown.\n\n\n\n\n\n","category":"method"},{"location":"api/#MicroTracker.find_trajectory_bounds-Tuple{AbstractDataFrame}","page":"API","title":"MicroTracker.find_trajectory_bounds","text":"find_trajectory_bounds(df_1particle::AbstractDataFrame, video_resolution::Tuple{Int, Int})\n\nReturn a tuple of frame numbers, (low, high) where all trajectory points are in bounds.\n\nThis calculates the radius of the particle, then iterates forward and backward from the center of the trajectory until it finds a point that is out of bounds. This is the high and low bound of the trajectory.\n\n\n\n\n\n","category":"method"},{"location":"api/#MicroTracker.fit_line-Tuple{AbstractVector, AbstractVector}","page":"API","title":"MicroTracker.fit_line","text":"fit_line(x::AbstractVector, y::AbstractVector)\n\nFit a linear equation to data x, y. Returns m, b.\n\ny = mx + b\n\nDependent on Optim.\n\n\n\n\n\n","category":"method"},{"location":"api/#MicroTracker.get_assets_path-Tuple{}","page":"API","title":"MicroTracker.get_assets_path","text":"get_asset_path()\n\nAlways returns the path to the assets folder in the package root directory.\n\nThis works from the dev's, test suite's, or user's perspective.\n\n\n\n\n\n","category":"method"},{"location":"api/#MicroTracker.get_names_in_particle_data-Tuple{}","page":"API","title":"MicroTracker.get_names_in_particle_data","text":"get_names_in_particle_data()\n\nReturn a list of all .csv files contained in the particle_data folder.\n\n\n\n\n\n","category":"method"},{"location":"api/#MicroTracker.getfileextension-Tuple{AbstractString}","page":"API","title":"MicroTracker.getfileextension","text":"getfileextension(imagename::AbstractString)\n\nGet the file extension from the image name.\n\nExample\n\njulia> MicroTracker.getfileextension(\"a0001.tif\")\n\"tif\"\n\n\n\n\n\n","category":"method"},{"location":"api/#MicroTracker.getframenumfromimagename-Tuple{AbstractString}","page":"API","title":"MicroTracker.getframenumfromimagename","text":"getframenumfromimagename(imagename::AbstractString)\n\nGet the relevant frame number from the name of an image.  Does not necessarily match the real frame number in the data.\n\nExample\n\njulia> MicroTracker.getframenumfromimagename(\"5 24p9 1 2022-04-04-16-30-31-16-a-985.tif\")\n985\n\njulia> MicroTracker.getframenumfromimagename(\"05_23_8_2 kept stack0001.tif\")\n1\n\n\n\n\n\n","category":"method"},{"location":"api/#MicroTracker.getimagenamedigitlength-Tuple{AbstractString}","page":"API","title":"MicroTracker.getimagenamedigitlength","text":"getimagenamedigitlength(tifname::AbstractString)\n\nGet the length of the digits quantifying the frame in the image name. Used to catch leading zeros.\n\nExample\n\njulia> MicroTracker.getimagenamedigitlength(\"05_23_8_2 kept stack0001.tif\")\n4\n\n\n\n\n\n","category":"method"},{"location":"api/#MicroTracker.getprefixfromimagename-Tuple{AbstractString}","page":"API","title":"MicroTracker.getprefixfromimagename","text":"getprefixfromimagename(imagename::AbstractString)\n\nReturn the prefix from the name of an image. This is everything besides the <framenumbers>.tif.\n\nExample\n\njulia> MicroTracker.getprefixfromimagename(\"5 24p9 1 2022-04-04-16-30-31-16-a-985.tif\")\n\"5 24p9 1 2022-04-04-16-30-31-16-a-\"\n\njulia> MicroTracker.getprefixfromimagename(\"05_23_8_2 kept stack0001.tif\")\n\"05_23_8_2 kept stack\"\n\n\n\n\n\n","category":"method"},{"location":"api/#MicroTracker.getvideoresolution-Tuple{AbstractString}","page":"API","title":"MicroTracker.getvideoresolution","text":"getvideoresolution(video_name::AbstractString)\n\nLoad in 1 frame of video_name and return the resolution of the video as a Tuple{Int, Int}\n\n\n\n\n\n","category":"method"},{"location":"api/#MicroTracker.inbounds-Tuple{DataFrameRow, AbstractFloat, Tuple{Int64, Int64}}","page":"API","title":"MicroTracker.inbounds","text":"inbounds(row::DataFrameRow, radius::AbstractFloat, video_resolution::Tuple{Int, Int})\n\nCheck if dataframe row is in bounds. This is a single row in a dataframe of a single particle's trajectory.\n\nThis looks at x and y coordinates and checks if they are within radius of the edge of the video.\n\n\n\n\n\n","category":"method"},{"location":"api/#MicroTracker.jldf_to_pydf-Tuple{Any}","page":"API","title":"MicroTracker.jldf_to_pydf","text":"jldf_to_pydf(jldf)\n\nConvert a DataFrame (from DataFrames.jl) to a pandas.DataFrame. Used internally to interface with trackpy.\n\n\n\n\n\n","category":"method"},{"location":"api/#MicroTracker.link-Tuple{AbstractDataFrame, NamedTuple}","page":"API","title":"MicroTracker.link","text":"link(particle_data::AbstractDataFrame, linking_settings::NamedTuple; trackpykwargs...)\n\nUse trackpy to link particle data into trajectories across frames.\n\nSee the Linking Settings docs for the fields and format of linking_settings. Any kwargs will be passed to the trackpy.link function trackpy.link.\n\nExample\n\njulia> link(particle_data, linking_settings)\n\n\n\n\n\n","category":"method"},{"location":"api/#MicroTracker.load_linked_data-Tuple{Any}","page":"API","title":"MicroTracker.load_linked_data","text":"load_linked_data(filename)\n\nRead a linked data .csv file into a DataFrame. Assumes the .csv file is in the linked_data folder.\n\n\n\n\n\n","category":"method"},{"location":"api/#MicroTracker.load_particle_data-Tuple{AbstractString}","page":"API","title":"MicroTracker.load_particle_data","text":"load_particle_data(video_name::AbstractString)\n\nRead a particle data .csv located in /particle_data into a DataFrame.\n\nIf the .csv file is from ImageJ (contains X, Y, and Label columns, not x, y, and frame), it will:\n\nExtract the frame number from the label column and add it as a new column using extract_frame_from_label\nRename the X and Y columns to x and y so it works with link.\nRemove any columns with a blank name.\nRename the Circ. column to Circ so it works with Julia symbol notation.\n\n\n\n\n\n","category":"method"},{"location":"api/#MicroTracker.loadframe-Tuple{AbstractString, Integer}","page":"API","title":"MicroTracker.loadframe","text":"loadframe(vidname::AbstractString, framenumber::Integer)\n\nReturn an image corresponding to the framenumber frame in the video vidname. Must be present in the original_video folder.\n\nIt looks at the way the tifs are automatically named and matches the pattern. Does not necessarily match the real frame number in the data, especially if there is no particle in the first frame.\n\nNormally, images from ImageJ index at 0, while Julia indexes at one. Therefore, this function will return the image named with framenumber-1.\n\n\n\n\n\n","category":"method"},{"location":"api/#MicroTracker.numerical_derivative-Tuple{AbstractVector}","page":"API","title":"MicroTracker.numerical_derivative","text":"numerical_derivative(x::AbstractVector)\n\nReturn the derivative of a Vector with spacing h = 1. Use on x and y columns of tracking data. Similar to Python's np.gradient function, but 61x faster here.\n\n\n\n\n\n","category":"method"},{"location":"api/#MicroTracker.parse_to_tuple-Tuple{AbstractString}","page":"API","title":"MicroTracker.parse_to_tuple","text":"parse_to_tuple(s::AbstractString)\n\nConvert a string to a Tuple{Int64, Int64}. Internal function used in load_linked_data.\n\n\n\n\n\n","category":"method"},{"location":"api/#MicroTracker.particle_data_to_linked_data-Tuple{AbstractString, Dict, NamedTuple}","page":"API","title":"MicroTracker.particle_data_to_linked_data","text":"particle_data_to_linked_data(video_name::AbstractString, translation_dict::Dict, linking_settings::NamedTuple)\n\nProcess particle data into linked trajectory data while calculating instantaneous velocity and other salient data. Returns a DataFrame that can then be saved to linked_data using save_linked_data_with_metadata.\n\nA particle data csv corresponding to video_name must be present in the particle_data folder. The translation_dict` is a dictionary detailing the information contained in the filename. For full explanation,  see the MicroTracker docs (ref needed).\n\n\n\n\n\n","category":"method"},{"location":"api/#MicroTracker.plotannotatedframe-Tuple{AbstractDataFrame, AbstractString, Int64}","page":"API","title":"MicroTracker.plotannotatedframe","text":"plotannotatedframe(linked_data::AbstractDataFrame, filename::AbstractString, framenumber::Int; showimage=true, showellipse=true, plotkwargs...)\n\nDisplay a single frame of a video with all microbot trajectories overlaid. Optionally, hide the fit ellipses or the image.\n\nTo plot a single microbot's trajectory, use plotannotatedframe_single. plotkwargs are passed to plot!() and are intended to change the appearance of the plot.\n\n\n\n\n\n","category":"method"},{"location":"api/#MicroTracker.plotannotatedframe_single-Tuple{AbstractDataFrame, AbstractString, Int64}","page":"API","title":"MicroTracker.plotannotatedframe_single","text":"plotannotatedframe_single(linked_data::AbstractDataFrame, particle_unique::AbstractString, framenumber::Int; showimage=true, showellipse=true, plotkwargs...)\n\nDisplay a single frame of a video, with a single chosen microbot trajectory overlaid. Optionally, hide the fit ellipses or the image.\n\nTo plot all microbot trajectories, use plotannotatedframe. plotkwargs are passed to plot!() and are intended to change the appearance of the plot.\n\n\n\n\n\n","category":"method"},{"location":"api/#MicroTracker.pydf_to_jldf-Tuple{Any}","page":"API","title":"MicroTracker.pydf_to_jldf","text":"pydf_to_jldf(pydf)\n\nConvert a pandas.DataFrame to a DataFrame (from DataFrames.jl). Used internally to interface with trackpy.\n\n\n\n\n\n","category":"method"},{"location":"api/#MicroTracker.save_linked_data_with_metadata-Tuple{AbstractDataFrame, Dict, NamedTuple}","page":"API","title":"MicroTracker.save_linked_data_with_metadata","text":"save_linked_data_with_metadata(linked_data::AbstractDataFrame, translation_dict::Dict, linking_settings::NamedTuple)\n\nSave linked data with the translation_dict and linking_settings in the filename. Will overwrite existing file.\n\n\n\n\n\n","category":"method"},{"location":"api/#MicroTracker.total_displacement-Tuple{AbstractVector, AbstractVector}","page":"API","title":"MicroTracker.total_displacement","text":"total_displacement(x::AbstractVector, y::AbstractVector)\n\nReturn the total displacement of the particle in pixels.\n\n\n\n\n\n","category":"method"},{"location":"api/#MicroTracker.trajectory_analyzer-Tuple{AbstractDataFrame, AbstractDataFrame, AbstractString}","page":"API","title":"MicroTracker.trajectory_analyzer","text":"trajectory_analyzer(linked_data, collapsed_data, particle_unique::AbstractString, [framenumber; [size_variable=\"Major_um\"], [annotationkwargs...])\n\nDisplay a comphrehensive dashboard of a single microbot, including instantaneous velocity, a chosen size_variable, and the FFT of the size_variable.\n\nArguments\n\nlinked_data : AbstractDataFrame, time-series linked data, as returned by load_linked_data or batch_particle_data_to_linked_data.\ncollapsed_data : AbstractDataFrame, collapsed data with a row per microbot, as returned by collapse_data.\nparticle_unique : AbstractString. The unique identifier of the microbot to be analyzed.\nframenumber : (Optional) Int The frame number to be displayed. If not provided, the last frame is used.\nsize_variable : (Optional) AbstractString, The column name of the size variable to be displayed. Defaults to \"Major_um\".\nannotationkwargs : (Optional) Keyword arguments passed to plotannotatedframe_single().\n\n\n\n\n\n","category":"method"},{"location":"api/#MicroTracker.translation_dict_to_string-Tuple{Dict}","page":"API","title":"MicroTracker.translation_dict_to_string","text":"translation_dict_to_string(translation_dict::Dict)\n\nConvert a dictionary into a string that can be used as a filename. Used internally to save linked_data.\n\nExample\n\njulia> test_translation_dict = Dict(\"f_Hz\"=>(1, Int64), \"B_mT\"=>(2, Float64), \"FPS\"=>(3, Float64));\n\njulia> MicroTracker.translation_dict_to_string(test_translation_dict)\n\"B_mT=(2, Float64), FPS=(3, Float64), f_Hz=(1, Int64)\"\n\n\n\n\n\n","category":"method"},{"location":"api/#MicroTracker.upperright-Tuple{Plots.Plot}","page":"API","title":"MicroTracker.upperright","text":"upperright(p::Plots.Plot)\n\nReturn a tuple of coordinates corresponding to the upper right corner of a plot, plus an increase of oob percentage in the y direction.\n\n\n\n\n\n","category":"method"},{"location":"pluto/#Pluto","page":"Pluto","title":"Pluto","text":"","category":"section"},{"location":"pluto/","page":"Pluto","title":"Pluto","text":"On this page, you'll learn how to install Pluto in Julia and use it to load the included microtracker_notebook.jl from create_project_here.","category":"page"},{"location":"pluto/","page":"Pluto","title":"Pluto","text":"Pluto.jl is an awesome package for Julia that implements reactive notebooks. This, combined with Julia, enables fast reactivity perfect for scientific programming.","category":"page"},{"location":"pluto/","page":"Pluto","title":"Pluto","text":"To open the MicroTracker example notebook in Pluto, add Pluto to your environment. This can either be in your global environment or your MicroTracker environment, depending on where you want to launch Pluto from.","category":"page"},{"location":"pluto/","page":"Pluto","title":"Pluto","text":"Since I find Pluto useful for more things than just MicroTracker, I recommend adding it to your global environment.","category":"page"},{"location":"pluto/","page":"Pluto","title":"Pluto","text":"] add Pluto","category":"page"},{"location":"pluto/","page":"Pluto","title":"Pluto","text":"Then, to open Pluto in your browser, type this in your Julia REPL:","category":"page"},{"location":"pluto/","page":"Pluto","title":"Pluto","text":"julia> using Pluto; Pluto.run()","category":"page"},{"location":"pluto/#Open-the-notebook","page":"Pluto","title":"Open the notebook","text":"","category":"section"},{"location":"pluto/","page":"Pluto","title":"Pluto","text":"On the Pluto.jl landing page, you'll want to paste the path to the microtracker_notebook.jl file in your MicroTracker project folder. On Windows, I can right click on a file/folder and click \"Copy as Path\". So in my case, since my MicroTracker folder I created a project in is named tutorial, my path I'll paste in is \"R:\\Wormhole\\OneDrive\\Research\\Papers\\JOSS_microtracker\\tutorial\\microtracker_notebook.jl\".","category":"page"},{"location":"pluto/","page":"Pluto","title":"Pluto","text":"This will open the notebook, install any necessary extra packages, and run all the cells. This may take awhile on the first run, so be patient! Julia compiles just-in-time to enable fast code.","category":"page"},{"location":"pluto/","page":"Pluto","title":"Pluto","text":"Now, you have a dashboard in which you can run new analyses, Julia code, and interactively view your data with the trajectory_analyzer. Using the documentation in Linking, you may substitute any step in the pipeline with your own custom code. If you think it would be useful to others, please consider contributing!","category":"page"},{"location":"pluto/","page":"Pluto","title":"Pluto","text":"warning: Warning\nPluto creates its own Pkg environment behind the scenes. While this is great for reproducibility and simply typing using <packagename> when you want to use a package, it does not automatically match the MicroTracker environment created in the Creating an environment for your project section. To update to the latest version of MicroTracker, you must click the little up arrow next to the package names at the top.","category":"page"},{"location":"experimental/#Experimental","page":"Experimental","title":"Experimental","text":"","category":"section"},{"location":"experimental/","page":"Experimental","title":"Experimental","text":"On this page, you'll learn how best to set up your experiment and microscopy for microbot tracking with MicroTracker.","category":"page"},{"location":"experimental/#Filenames-keep-track-of-variables","page":"Experimental","title":"Filenames keep track of variables","text":"","category":"section"},{"location":"experimental/","page":"Experimental","title":"Experimental","text":"A study can contain multiple independent variables (temperature, field strength, microbot design, viscosity, geometry). MicroTracker can handle as many variables as you'd like, provided there is a separate video at each experimental condition.","category":"page"},{"location":"experimental/","page":"Experimental","title":"Experimental","text":"For example, lets say we're studying temperature and field strength. A convenient way to keep track of experimental conditions is to include it in the filename, and MicroTracker is designed to parse and collect information from each video filename. If I had temperature and field strength to record, my completed set of videos would have these filenames:","category":"page"},{"location":"experimental/","page":"Experimental","title":"Experimental","text":"\"32_4_1\"\n\"37_4_1\"\n\"37_4_2\"\n\"32_6p2_1\"","category":"page"},{"location":"experimental/","page":"Experimental","title":"Experimental","text":"I would take note that the first number is the temperature in celsius, the second number is the field in mT, and the third number is the # of videos I've taken at that condition.","category":"page"},{"location":"experimental/","page":"Experimental","title":"Experimental","text":"You can set your own format, but notice two requirements for your file naming format:","category":"page"},{"location":"experimental/","page":"Experimental","title":"Experimental","text":"Underscores (_) are used to separate conditions.\nInstead of periods, the letter p is used. 6.2 turns into 6p2.","category":"page"},{"location":"experimental/","page":"Experimental","title":"Experimental","text":"After naming your videos appropriately, you can convey this information to MicroTracker using the requisite Translation Dictionary in the Linking step.","category":"page"},{"location":"experimental/#Contrast-is-important","page":"Experimental","title":"Contrast is important","text":"","category":"section"},{"location":"experimental/","page":"Experimental","title":"Experimental","text":"For successful tracking, the microbots must have good contrast with their background, especially for simple thresholding techniques like that detailed in Segmentation. If your experiments do not easily lend themselves to a contrasting and uniform background, look into advanced methods of segmentation like ilastik or applying additional filters with ImageJ.","category":"page"},{"location":"experimental/","page":"Experimental","title":"Experimental","text":"tip: Tip\nWhen using fluorescent microscopy, the microbots will be \"bright\" while the background is dark. This can be accounted for by choosing a manual threshold for your microbots in the imagej macro in Segmentation.","category":"page"},{"location":"experimental/#Clean-up-before-you-analyze","page":"Experimental","title":"Clean up before you analyze","text":"","category":"section"},{"location":"experimental/","page":"Experimental","title":"Experimental","text":"Use ImageJ or any other video editor to clip out parts of the video you can't use. This could be when there are no microbots on the screen, any vibrations, or when you move the microscope.","category":"page"},{"location":"juliatips/#Julia-Tips","page":"Julia Tips","title":"Julia Tips","text":"","category":"section"},{"location":"juliatips/#Functions","page":"Julia Tips","title":"Functions","text":"","category":"section"},{"location":"juliatips/","page":"Julia Tips","title":"Julia Tips","text":"Arguments past a semicolon (;) in a function signature are keyword arguments, and must be supplied like showellipse=true.\nArguments with square brackets around them are optional, like [framenumber].","category":"page"},{"location":"quickstart/#Quick-Start","page":"Quick Start","title":"Quick Start","text":"","category":"section"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"This page is an abridged version of the documentation which runs through using MicroTracker with sample data. At the end of each bullet, there will be a link to the full section for more detailed explanation.","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"Install Julia from their website, making sure to add julia to your PATH. (Download and install Julia)\nOpen a terminal in a new empty folder, and type julia to open a julia REPL in that directory. (Open a Julia REPL in a directory)\nCreate a Julia environment and install MicroTracker into it using the following two commands. You can paste these into the Julia REPL.","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"] activate .","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"add MicroTracker","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"Import MicroTracker into your namespace using the following command. Make sure you press backspace to get out of the Pkg mode before running this command.","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"using MicroTracker","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"Create a new project with example data using the create_project_here function. This populates your empty folder with the structure for easily analyzing microscopy data with MicroTracker. The supplied data is only two videos with two independent variables for demonstration purposes, but MicroTracker is capable of processing hundreds of videos at once. (Create a MicroTracker project). ","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"create_project_here()","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"Define project specific inputs like the translation dictionary and filter settings. These variables are formatted for the supplied example data. (Translation Dictionary, Linking Settings)","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"translation_dict = Dict(\"f_Hz\"=>(1, Int64), \"B_mT\"=>(2, Float64), \"FPS\"=>(3, Float64))\nlinking_settings = (MPP = 0.605, SEARCH_RANGE_MICRONS = 1000, MEMORY = 0, STUBS_SECONDS = 0.5)","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"Batch process segmented image data into linked time-series microbot trajectories using a single function batch_particle_data_to_linked_data. This combines all the processing steps into a single command that processes an entire experimental array. (Batch linking)","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"linked_data = batch_particle_data_to_linked_data(translation_dict, linking_settings)","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"Collapse/summarize linked data for comparing microbots across experiments and videos using the collapse_data function. (Collapsing)","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"collapsed_data = collapse_data(linked_data, translation_dict)","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"Filter the microbot trajectories based on their collapsed statistics. Microbots may need to be excluded from the data if they are too small or large for the study, going too slow, or stuck to the substrate. Use filter_trajectories for the most common filters. (Filtering based on collapsed data).","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"filter_settings = (\n    MIN_VELOCITY = 10.0,  # um / s  \n    MIN_BOUNDING_RADIUS = 3.38,  # um\n    MAX_BOUNDING_RADIUS = 75,  # µm\n    MIN_DISPLACEMENT = 0,  # µm\n)\n\nfcd = filtered_collapsed_data = filter_trajectories(collapsed_data, filter_settings)","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"View the data on a experiment wide scale with the collapsed_data. MicroTracker reexports Plots.jl and StatsPlots.jl for convenience.","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"@df fcd scatter(:R, :V, group=:B_mT, xlims=(0, 40), ylims=(0, 100), xlabel=\"R (µm)\", ylabel=\"V (µm/s)\", leg_title = \"B (mT)\")","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"Or view on a trajectory specific scale using the trajectory_analyzer.","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"chosen_particle = fcd.particle_unique[2]\ntrajectory_analyzer(linked_data, collapsed_data, chosen_particle)","category":"page"},{"location":"quickstart/#What's-next?","page":"Quick Start","title":"What's next?","text":"","category":"section"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"Dive deeper with the included MicroTracker Pluto notebook and the the interactive version of the trajectory_analyzer on the Pluto page.\nGet started with using your own data and experiments in Experimental and Segmentation.","category":"page"},{"location":"linking/#Linking","page":"Linking","title":"Linking","text":"","category":"section"},{"location":"linking/","page":"Linking","title":"Linking","text":"On this page, you will process the segmented data in particle_data into a single linked_data which contains the time-series trajectory data for all tracked microbots.","category":"page"},{"location":"linking/","page":"Linking","title":"Linking","text":"These commands can be run in the Julia REPL or in the generated Pluto notebook file after Creating an environment for your project. See the Pluto tutorial page to see an established workflow.","category":"page"},{"location":"linking/#Input-parameters","page":"Linking","title":"Input parameters","text":"","category":"section"},{"location":"linking/","page":"Linking","title":"Linking","text":"Now, let's format our inputs to the linking process, the translation_dict and linking_settings.","category":"page"},{"location":"linking/#Translation-Dictionary","page":"Linking","title":"Translation Dictionary","text":"","category":"section"},{"location":"linking/","page":"Linking","title":"Linking","text":"Provided you've followed the requirements for filenaming detailed in Experimental, you now need to tell MicroTracker what your independent variables are. This is in the form of a Dictionary where the key is the name of the variable and the value is a tuple of the index and type. Following the example in Experimental, we have a filename that looks like 32_6p2_1. The translation dictionary would then look like:","category":"page"},{"location":"linking/","page":"Linking","title":"Linking","text":"translation_dict = Dict(\"T_C\" => (1, Float64), \"B_mT\" => (2, Float64))","category":"page"},{"location":"linking/","page":"Linking","title":"Linking","text":"In plain english, this is telling MicroTracker that the temperature is recorded in the first position and is a floating point number (can have decimal places) and the field strength is a floating point number in the second position. These are the possible types a variable in a filename can have:","category":"page"},{"location":"linking/","page":"Linking","title":"Linking","text":"Int64 If an integer variable makes sense, like number of washes, number of particles, etc.\nFloat64 Most variables, a floating point number.\nString If the variable makes most sense if its a string. Like \"washed\" or \"aerosolized\".","category":"page"},{"location":"linking/","page":"Linking","title":"Linking","text":"Here, we know the FPS of our videos is constant across all videos, so we'll include it in the linking_settings below.","category":"page"},{"location":"linking/#Linking-Settings","page":"Linking","title":"Linking Settings","text":"","category":"section"},{"location":"linking/","page":"Linking","title":"Linking","text":"The linking settings are in the format of a NamedTuple. This linking_settings contains information about your video, like the microns per pixel (MPP) of your microscope setup and the frames per second of your video (FPS). It also contains parameters to feed to the underlying linking machinery in trackpy.link.","category":"page"},{"location":"linking/","page":"Linking","title":"Linking","text":"linking_settings = (\n    MPP = 0.605,  # Microns per pixel, scale of objective.\n    SEARCH_RANGE_MICRONS = 1000, # microns/s. Fastest a particle could be traveling. Determines \"how far\" to look to link.\n    MEMORY = 0,  # number of frames the blob can disappear and still be remembered\n    STUBS_SECONDS = 0.5,  # trajectory needs to exist for at least this many seconds \n    FPS = 60.0 # Frames per second. **Can omit if the FPS has been specified in the filename.**\n)","category":"page"},{"location":"linking/","page":"Linking","title":"Linking","text":"tip: Tip\nMicroTracker supports videos having different framerates, as long as this information is recorded in the filename. For an example of this, see the included examples and Pluto notebook.If instead the FPS across all videos is constant, we can include the FPS parameter in linking_settings and the exclude any mention of FPS in our translation_dict, as shown above.","category":"page"},{"location":"linking/#Batch-linking","page":"Linking","title":"Batch linking","text":"","category":"section"},{"location":"linking/","page":"Linking","title":"Linking","text":"Now that we've formatted and defined our translation_dict and linking_settings, its time to link.","category":"page"},{"location":"linking/","page":"Linking","title":"Linking","text":"The function batch_particle_data_to_linked_data is the 1-command version which runs all of the processing steps at once for every video. If you'd like to separate out the process and tinker with each step, see the Under the hood section below. ","category":"page"},{"location":"linking/","page":"Linking","title":"Linking","text":"julia> linked_data = batch_particle_data_to_linked_data(translation_dict, linking_settings)\n...output snipped","category":"page"},{"location":"linking/","page":"Linking","title":"Linking","text":"And just like that - all the segmented data in particle_data has been linked into continuous microbot trajectories and concatenated into one DataFrame, here the variable linked_data. This data contains the instantaneous velocity, size, and much more over the entire experimental lifetime of the microbot.","category":"page"},{"location":"linking/#Under-the-hood","page":"Linking","title":"Under the hood","text":"","category":"section"},{"location":"linking/","page":"Linking","title":"Linking","text":"Continue to Collapsing after batch linking. However, if you'd like to insert in your own processing step in the pipeline, here are the sub-functions that make up batch_particle_data_to_linked_data for your convenience. These functions are applied in order, from particle_data to linked_data.","category":"page"},{"location":"linking/","page":"Linking","title":"Linking","text":"load_particle_data\nadd_info_columns_from_filename\nlink\nadd_resolution_column!\nadd_useful_columns\nclip_trajectory_edges","category":"page"},{"location":"linking/#MicroTracker.load_particle_data","page":"Linking","title":"MicroTracker.load_particle_data","text":"load_particle_data(video_name::AbstractString)\n\nRead a particle data .csv located in /particle_data into a DataFrame.\n\nIf the .csv file is from ImageJ (contains X, Y, and Label columns, not x, y, and frame), it will:\n\nExtract the frame number from the label column and add it as a new column using extract_frame_from_label\nRename the X and Y columns to x and y so it works with link.\nRemove any columns with a blank name.\nRename the Circ. column to Circ so it works with Julia symbol notation.\n\n\n\n\n\n","category":"function"},{"location":"linking/#MicroTracker.add_info_columns_from_filename","page":"Linking","title":"MicroTracker.add_info_columns_from_filename","text":"add_info_columns_from_filename(particle_data::AbstractDataFrame, translation_dict::AbstractDict)\n\nExtract experimental metadata from the filename column and create a new column for each in particle_data. Returns a new DataFrame.\n\nAssumes the filename is separated by underscores and periods are denoted by p. The translation_dict details the filename format. For full explanation, see the MicroTracker docs: Translation Dictionary.\n\n\n\n\n\n","category":"function"},{"location":"linking/#MicroTracker.link","page":"Linking","title":"MicroTracker.link","text":"link(particle_data::AbstractDataFrame, linking_settings::NamedTuple; trackpykwargs...)\n\nUse trackpy to link particle data into trajectories across frames.\n\nSee the Linking Settings docs for the fields and format of linking_settings. Any kwargs will be passed to the trackpy.link function trackpy.link.\n\nExample\n\njulia> link(particle_data, linking_settings)\n\n\n\n\n\n","category":"function"},{"location":"linking/#MicroTracker.add_resolution_column!","page":"Linking","title":"MicroTracker.add_resolution_column!","text":"add_resolution_column!(particle_data::AbstractDataFrame)\n\nLook at a frame of the video in original_video which corresponds to the data and add a column for the resolution of type Tuple{Int, Int}. Modifies particle_data in place, signfified by the ! in the function name.\n\nUses getvideoresolution.\n\n\n\n\n\n","category":"function"},{"location":"linking/#MicroTracker.add_useful_columns","page":"Linking","title":"MicroTracker.add_useful_columns","text":"add_useful_columns(linked_data::AbstractDataFrame, linking_settings::NamedTuple)\n\nAfter linking, add some useful columns to the dataframe, like include dx, dy, dp (speed), and size measurements in microns. \n\nUses the numerical_derivative and total_displacement functions.\n\nDefinitions\n\nparticle_unique : a string which uniquely identifies a particle. This is a combination of the filename and the particle number.\ndx : numerical derivative of x, i.e. instantaneous velocity in the x direction. Units of pixels/frame.\ndy : numerical derivative of y, i.e. instantaneous velocity in the y direction. Units of pixels/frame.\ndp : instantaneous speed. √(dx^2 + dy^2). Units of pixels/frame.\ndx_um : dx converted to µm/s.\ndy_um : dy converted to µm/s.\ndp_um : dp converted to µm/s.\ntotal_displacement_um : total displacement of the microbot. Constant on every row, since this is a total. Units of µm.\nArea_um : area of the microbot. Units of µm^2.\ntime : time, converted from the frame column. Units of seconds.\nMajor_um : major axis of the fit ellipse of the microbot. Units of µm.\nMinor_um : minor axis of the fit ellipse of the microbot. Units of µm.\n\n\n\n\n\n","category":"function"},{"location":"linking/#MicroTracker.clip_trajectory_edges","page":"Linking","title":"MicroTracker.clip_trajectory_edges","text":"clip_trajectory_edges(linked_data::AbstractDataFrame, linking_settings::NamedTuple)\n\nIterate through each trajectory and remove the tracking data where the particle is out of frame.\n\nThe particle is out of frame when the center is within the radius of the particle from the edge of the video.\n\nUses find_trajectory_bounds to find the bounds of the trajectory with inbounds.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = MicroTracker","category":"page"},{"location":"#Home","page":"Home","title":"Home","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation for MicroTracker - a Julia package for analyzing microscopy videos of microbots.","category":"page"},{"location":"#Get-Started","page":"Home","title":"Get Started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Follow an abridged version of the manual with included sample data and videos on the Quick Start page. This page also outlines the layout of the documentation.","category":"page"},{"location":"#Why-Julia?","page":"Home","title":"Why Julia?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In short, Julia is easy to read and write, yet retains the speed of statically compiled languages like C and Fortran. It also provides Pluto.jl, a reactive notebook environment that solves all the frustration I've had with Jupyter notebooks and Mathematica. For a more eloquent explanation, see the Julia introduction.","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you don't know Julia, don't worry. It is similar and as easy as Python (I'd argue easier). The best learning source is the Computational Thinking course from MIT or the included tutorial notebooks in Pluto.jl.","category":"page"}]
}
